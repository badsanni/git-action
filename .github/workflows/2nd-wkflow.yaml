#
#

name: test-pipeline

env:
  IMAGE_REGISTRY: gwproductengineering.jfrog.io
  APP_NAME: nj-ppln
  IMAGE_NAME: gwproductengineering.jfrog.io/si-docker-local/si-ui
  IMAGE_TAGS: v0.1
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  SI_NAMESPACE: nj-ppln
  BETA_NAMESPACE: nj-ppln
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL_NJ }}
  SONAR_ROOT_CERT: ${{ secrets.SONAR_ROOT_CERT }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_NJ }}
  JFROG_USERNAME: ${{ secrets.JFROG_USERNAME_FOR_NJ }}
  JFROG_PASSWORD: ${{ secrets.JFROG_ACCESS_TOKEN_FOR_NJ }}

on:
  push:
    branches: ["test"]

  workflow_dispatch:
    inputs:
      veracode_static_analysis:
        description: 'Run Veracode Static Analysis?'
        required: true
        default: 'false'
      sonarqube:
        description: 'Run Sonarqube Static Analysis?'
        required: true
        default: 'false'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run lint
        run: |
          echo linting

  sonarqube:
    if: github.event.inputs.sonarqube == 'true'
    name: Sonarqube Static Analysis
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: -Dsonar.projectKey=nj-pipeline

        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_NJ }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL_NJ }}
          SONAR_ROOT_CERT: ${{ secrets.SONAR_ROOT_CERT }}

  vulnerability_scan_dockerBaseImage:
    name: Vulnerability Scan Docker Base Image
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3
      - name: Vulnerability Scan Docker
        run: |
          echo scanning docker base image
          bash trivy-docker-image-scan.sh

  vulnerability_scan_dockerFile:
    name: Vulnerability Scan DockerFile
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3
      - name: Vulnerability Scan Docker
        run: |
          echo scanning dockerfile
          bash trivy-docker-image-scan.sh

  docker_build:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [vulnerability_scan_dockerFile, vulnerability_scan_dockerBaseImage]
    steps:
      - uses: actions/checkout@v3
      - name: Build docker image and deploy to jfrog
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }} .
          docker tag ${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }} ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAGS }}
          echo ${{ secrets.JFROG_ACCESS_TOKEN_FOR_NJ }} | docker login -u github-actions-for-si --password-stdin ${{ env.IMAGE_REGISTRY }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAGS }}
          echo "building docker image test build"

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]

# jobs:
#   approval:
#     name: Request Approval
#     runs-on: ubuntu-latest
#     steps:
#       - name: Wait for Approval
#         uses: hmarr/auto-approve-action@v2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
	
